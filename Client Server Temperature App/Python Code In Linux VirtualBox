#Client Server Temperature App 

#time library for delays, socket library for correct data flow 

import time; import socket 

#senseHat emulator used to collect data from temperature and humidity sensors 

from sense_emu import SenseHat sense = SenseHat() 

#initialise the array that the sensor data will be added to 

dataReadings = [] 

def startServer(): serverObject = socket.socket() #creating our server server = socket.gethostname() #for testing purposes print(server) #name of computer... 

 print("waiting for connection....") return serverObject 

def receiveClient(serverObject): port = 2003 # hard coded port number #serverObject.bind(("<IPADDRESS>", port))# setting up server serverObject.bind(("<IPADDRESS>", port))# setting up server serverObject.listen(5) # serverObject waits 5 seconds for a response (client,addr) = serverObject.accept() # assigns (client,addr) to the serverObject.accept() print("Got a connection from " + str(addr)) return client 

def addToArray(client, string): data = client.recv(1) # server receives input of temp or humidity menu = data.decode("utf-8") # assigns input to menu variable 

# tempdata 
if(menu=="1"): 
    print("Menu is set to Temperature") 
    print('Temperature Data: ') 
    while len(dataReadings) < 10: 
        temperature = sense.get_temperature() 
        print(temperature) 
        dataReadings.append(temperature) 
        time.sleep(0.5) 
        if len(dataReadings) == 10: 
            print("Finished") 
     
# humdata     
elif(menu=="2"):   
    print("Menu is set to Humidity") 
    print('Humidity Data: ') 
    while len(dataReadings) < 10: 
        humidity = sense.get_humidity() 
        print(humidity) 
        dataReadings.append(humidity) 
        time.sleep(0.5) 
        if len(dataReadings) == 10: 
            print("Finished") 
  

#gets the maximum amount of the data collected, casts to string before sending back 

def getMax(array, client): maximum = "" maxValue = max(array) maximum = str(maxValue) + " " client.send(maximum.encode()) 

#gets the minimum amount of the data collected, casts to string before sending back 

def getMin(array, client): minimum = "" minValue = min(array) minimum = str(minValue) + " " client.send(minimum.encode()) 

#gets the averageof the data collected, casts to string before sending back 

def getAverage(array, client): average = "" averageValue = sum(array)/len(array) averageValue = round(averageValue, 2) average = str(averageValue) client.send(average.encode()) 

if name == 'main':
serverObject = startServer() # starts up the server, assigns it to serverObject variable
client = receiveClient(serverObject) # assigns current client to client variable
arrayToString = "" # declares arrayToString as an empty String for later use
addToArray(client, arrayToString) # calls addToArray which collects data and adds to the arrayToString
data2 = client.recv(2) # server receives the "menuSelection" variable from the Java client
menuSelection = data2.decode("utf-8") # decodes the "menuSelection" variable for use in the server
if menuSelection == "1": # if user selects printAll in Java client
for i in dataReadings:
arrayToString += str(i) + " "
client.send(arrayToString.encode())
elif menuSelection == "2": # if user selects
getAverage in Java client getAverage(dataReadings, client)
elif menuSelection == "3": # if user selects getMax in Java client
getMax(dataReadings, client)
elif menuSelection == "4": # if user selects
getMin in Java client getMin(dataReadings, client)
time.sleep(1) # wait one second
client.close() # closes the client
serverObject.close() # closes the server 
